# -*- coding: utf-8 -*-
"""NBA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wjUmMAaOeygRYXXXOIy_sEaV2tyxaK61
"""





from nba_api.stats.endpoints import playercareerstats

# Nikola JokiÄ‡
career = playercareerstats.PlayerCareerStats(player_id='203999')

# pandas data frames (optional: pip install pandas)
career.get_data_frames()[0]

# json
career.get_json()

# dictionary
career.get_dict()

from nba_api.live.nba.endpoints import scoreboard

# Today's Score Board
games = scoreboard.ScoreBoard()

# json
games.get_json()

# dictionary
games.get_dict()



import pandas as pd

path = "https://raw.githubusercontent.com/anthonythanpoovong/NBA-Sports-Betting-Analysis-App/dataset/nba_games.csv"
df = pd.read_csv(path)
df.describe
df

"""Mp = minutes played

fg =

fga =

3p =

3pa =

"""

df = df.sort_values("date")
df = df.reset_index(drop = True)

del df["mp.1"]
del df["mp_opp.1"]
del df["index_opp"]
df

def add_target(team):
  team["target"] = team["won"].shift(-1)
  return team

df = df.groupby("team", group_keys = False).apply(add_target)

df

df[df["team"] == "WAS"]
df["team"]
df

df["target"][pd.isnull(df["target"])] = 2
df["target"] = df["target"].astype(int, errors = "ignore")
df

df["won"].value_counts()

df["target"].value_counts()

nulls = pd.isnull(df)
nulls = nulls.sum()

nulls

nulls = nulls[nulls > 0]

valid_col = df.columns[~df.columns.isin(nulls.index)]
valid_col

df = df[valid_col].copy()
df

"""pip install sckit-learn"""



from sklearn.model_selection import TimeSeriesSplit
from sklearn.feature_selection import SequentialFeatureSelector
from sklearn.linear_model import RidgeClassifier

rr = RidgeClassifier(alpha = 1)
split = TimeSeriesSplit(n_splits = 3)
sfs = SequentialFeatureSelector(rr, n_features_to_select = 30, direction ="forward", cv= split)

removed_col = ["season", "date", "won", "target", "team", "team_opp"]
selected_col = df.columns[~df.columns.isin(removed_col)]

"""scaling part"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df[selected_col] = scaler.fit_transform(df[selected_col])
df

sfs.fit(df[selected_col], df["target"])

predictors = list(selected_columns[sfs.get_support()])
def backtest(data, model, predictors, start=2, step=1):
    all_predictions = []

    seasons = sorted(data["season"].unique())

    for i in range(start, len(seasons), step):
        season = seasons[i]
        train = data[data["season"] < season]
        test = data[data["season"] == season]

        model.fit(train[predictors], train["target"])

        preds = model.predict(test[predictors])
        preds = pd.Series(preds, index=test.index)
        combined = pd.concat([test["target"], preds], axis=1)
        combined.columns = ["actual", "prediction"]

        all_predictions.append(combined)
    return pd.concat(all_predictions)

predictions = backtest(df, rr, predictors)

from sklearn.metrics import accuracy_score

accuracy_score(predictions["actual"], predictions["prediction"])